"Don't wrap lines
set nowrap

"Case insensitve search
set ignorecase

"Case sensitve search if search has capital letter
set smartcase

" Change cursor shape between insert and normal mode in tmux/iTerm2.app
if $TERM_PROGRAM =~ "iTerm"
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

" No bells
set vb
set t_vb=

" Set leader to comma
let mapleader=","

" Set the font face and size
set gfn=Monaco:h15

" Highlight search
set hlsearch

" Use fzf
set rtp+=/usr/local/opt/fzf

" toggle background light/dark
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR> )
" Put these BEFORE colorscheme solarized
let g:solarized_termcolors=256
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
let g:solarized_termtrans=0
set termguicolors
set background=dark
colorscheme NeoSolarized
if has('termguicolors')
  set termguicolors
endif
let g:solarized_termcolors=256
let g:solarized_contrast="normal"

if has("gui_macvim")
  " Switch to specific tab numbers with Command-number
  noremap <D-1> :tabn 1<CR>
  noremap <D-2> :tabn 2<CR>
  noremap <D-3> :tabn 3<CR>
  noremap <D-4> :tabn 4<CR>
  noremap <D-5> :tabn 5<CR>
  noremap <D-6> :tabn 6<CR>
  noremap <D-7> :tabn 7<CR>
  noremap <D-8> :tabn 8<CR>
  noremap <D-9> :tabn 9<CR>
  " Command-0 goes to the last tab
  noremap <D-0> :tablast<CR>
endif

" Trailing white space
match ErrorMsg '\s\+$'
nnoremap <Leader>rtw :%s/\s\+$//e<CR>

" Remove trailing whitespace on save for ruby/elixir/js files
au BufWritePre *.rb :%s/\s\+$//e
au BufWritePre *.ex :%s/\s\+$//e
au BufWritePre *.exs :%s/\s\+$//e
au BufWritePre *.js :%s/\s\+$//e

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remember info about open buffers on close
set viminfo^=%

" pry macros
map <Leader>b obinding.pry<esc>:w<CR>
map <Leader>B Obinding.pry<esc>:w<CR>
map <C-b> :g/binding.*pry/d<CR>:w<CR>
map <Leader>br obinding.remote_pry<esc>:w<CR>
map <Leader>BR Obinding.remote_pry<esc>:w<CR>
map <Leader>i orequire IEx<CR>IEx.pry<esc>:w<CR>
map <Leader>I Orequire IEx<CR>IEx.pry<esc>:w<CR>
map <C-i> :g/IEx/d<CR>:w<CR>

" debugger macros
map <Leader>d odebugger<esc>:w<CR>
map <Leader>D Odebugger<esc>:w<CR>

" Open a new tab with the current buffer's path
map <leader>vs :vs <c-r>=expand("%:p:h")<cr>/

let g:rspec_runner = "os_x_iterm"

" Treat es6 files as javascript
autocmd BufRead,BufNewFile *.es6 setfiletype javascript

" ================ abbreviations/spelling ==========================
iab organziation organization
iab orgnaization organization

" ================ scrolling ==========================
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

" ================ Plugins ========================
" NerdTree {
    map <C-n> :NERDTreeToggle<CR>
     "}

" Fugitive {
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
     "}

" FZF {
    nnoremap <C-p> :Files<Cr>
    map <C-t> :Buffers<CR>
    let g:fzf_tags_command = 'ctags -R'
    "}
" ================ Linters ========================
" Disable dialyzer as it's killing my CPU
" let g:ale_linters = {
"       \ 'elixir': ['credo', 'dogma']
"       \ }

autocmd CursorHold * silent! checktime
autocmd FileType markdown set wrap linebreak
autocmd FileType markdown set tw=0
autocmd FileType markdown noremap j gj
autocmd FileType markdown noremap k gk

" Use dotcom's safe-ruby if it's available
autocmd FileType ruby if executable('bin/safe-ruby') | let g:ale_ruby_ruby_executable = 'bin/safe-ruby' | endif

" Plan https://github.com/mrtazz/vim-plan
" base dir for all notes
let g:PlanBaseDir = get(g:, 'PlanBaseDir', $HOME . "/code/1-1-Repo-maxbeizer")
" template dir relative to base dir
let g:PlanTemplateDir = get(g:, 'PlanTemplatePath', "templates")
" daily notes dir relative to base dir
let g:PlanDailiesDir = get(g:, 'PlanTemplatePath', "dailies")
" generic notes dir relative to base dir
let g:PlanNotesDir = get(g:, 'PlanTemplatePath', "notes")
" allow user to add title to notes
let g:PlanPromptForTitle = get(g:, 'PlanPromptForTitle', 1)
