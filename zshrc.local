# https://gist.github.com/mislav/1712320
autoload colors; colors;
export LSCOLORS="Gxfxcxdxbxegedabagacad"
setopt prompt_subst

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
setopt NO_BEEP
setopt HIST_IGNORE_SPACE

# prompt

ZSH_THEME_GIT_PROMPT_PREFIX="%{$reset_color%}%{$fg[green]%}["
ZSH_THEME_GIT_PROMPT_SUFFIX="]%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}*%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN=""

# show git branch/tag, or name-rev if on detached head
parse_git_branch() {
  (command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
}

# show red star if there are uncommitted changes
parse_git_dirty() {
  if command git diff-index --quiet HEAD 2> /dev/null; then
    echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
  else
    echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
  fi
}

# if in a git repo, show dirty indicator + git branch
git_custom_status() {
  local git_where="$(parse_git_branch)"
  [ -n "$git_where" ] && echo "$ZSH_THEME_GIT_PROMPT_PREFIX${git_where#(refs/heads/|tags/)}$ZSH_THEME_GIT_PROMPT_SUFFIX$(parse_git_dirty)"
}

# basic prompt on the left
PROMPT='
%{$fg[yellow]%}[%*]%{$reset_color%} %{$fg[cyan]%}%~% 
$(git_custom_status) %(?.%{$fg[green]%}.%{$fg[red]%})%B$%b'

HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=100000

bindkey "^[[A" history-search-backward
bindkey "^[[B" history-search-forward

# . $HOME/.asdf/asdf.sh
fpath=(${ASDF_DIR}/completions $fpath)
autoload -Uz compinit && compinit

# https://github.com/Aloxaf/fzf-tab
source ~/code/fzf-tab/fzf-tab.plugin.zsh

# export PATH="$HOME/.bin:/$HOME/bin:$PATH"
#
export GOPATH=$HOME/code/go
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc
export PATH=$PATH:$GOPATH/bin
# export PATH="$HOME/.bin:$PATH"
export PATH="$HOME/.asdf/bin:$HOME/.asdf/shims:$PATH"
export PATH="$PATH:/usr/bin"
export PATH="$PATH:/usr/local/bin"
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
export PATH="$HOME/.bin:$PATH"

. ~/z.sh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

HB_CNF_HANDLER="$(brew --repository)/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
if [ -f "$HB_CNF_HANDLER" ]; then
 source "$HB_CNF_HANDLER";
fi

# heroku autocomplete setup
CLI_ENGINE_AC_ZSH_SETUP_PATH=/Users/mbeizer/Library/Caches/heroku/completions/zsh_setup && test -f $CLI_ENGINE_AC_ZSH_SETUP_PATH && source $CLI_ENGINE_AC_ZSH_SETUP_PATH;

# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=/Users/mbeizer/Library/Caches/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;
